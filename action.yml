name: gitrun
description: Deploy a JIT Github runner in the ai4eosc platform
author: Karlsruhe Institute of Technology

inputs:
  my-token:
    description: "The token to use to retrieve the access token"
    required: true
  api-token:
    description: "The token to use to retrieve the JIT configuration"
    required: true
  vo:
    description: "The VO to use"
    default: "vo.ai4eosc.eu"

outputs:
  container-id:
    description: The container id for the runner
    value: ${{ steps.start-runner.outputs.container-id }}
  runner-id:
    description: The runner id for the repository
    value: ${{ steps.get-jitconfig.outputs.runner-id }}

runs:
  using: composite
  steps:
    - name: Get oidc token from secret mytoken
      id: get-access-token
      shell: bash
      run: |
        ACCESS_TOKEN=$(curl --request POST \
          --url https://mytoken.data.kit.edu/api/v0/token/access \
          --header 'Content-Type: application/json' \
          --fail-with-body --silent --show-error \
          --data '{
            "comment": "Access Token for Github Actions",
            "grant_type": "mytoken",
            "mytoken": "${{ inputs.my-token }}"
        }' | jq -re .access_token)
        echo "access-token=$ACCESS_TOKEN" >> $GITHUB_OUTPUT

    - name: Generate a JIT configuration file for a self-hosted runner
      id: get-jitconfig
      shell: bash
      run: |
        RESPONSE=$(curl -L --request POST \
          --url https://api.github.com/repos/${{ github.repository }}/actions/runners/generate-jitconfig \
          --header 'Accept: application/vnd.github+json' \
          --header 'Authorization: Bearer ${{ inputs.api-token }}' \
          --header 'X-GitHub-Api-Version: 2022-11-28' \
          --fail-with-body --silent --show-error \
          --data '{
              "name": "'"ai4eosc runner $(uuidgen)"'",
              "runner_group_id": 1,
              "labels": ["self-hosted","ai4eosc"],
              "work_folder": "_work",
              "ephemeral": "true"
            }')
        echo "runner-id=$(echo $RESPONSE | jq -re .runner.id)" >> $GITHUB_OUTPUT
        echo "jitconfig=$(echo $RESPONSE | jq -re .encoded_jit_config)" >> $GITHUB_OUTPUT

    - name: Print JIT configuration
      shell: bash
      run: echo "${{ steps.get-jitconfig.outputs.jitconfig }}"

    - name: Start runner in ai4eosc platform
      id: start-runner
      shell: bash
      run: |
        SERVICE_CALL="jitconfig ${{ steps.get-jitconfig.outputs.jitconfig }}"
        JOB_ID=$(curl --request 'POST' \
          --url https://api.cloud.ai4eosc.eu/v1/deployments/modules/?vo=${{ inputs.vo }} \
          --header 'accept: application/json' \
          --header 'Authorization: Bearer ${{ steps.get-access-token.outputs.access-token }}' \
          --header 'Content-Type: application/json' \
          --fail-with-body --silent --show-error \
          --insecure \
          --data '{
            "general":{
                "docker_image": "boressan/gitrun",
                "docker_tag": "${{ github.ref_name }}",
                "service": "'"$SERVICE_CALL"'"
            },
            "hardware": {
                "cpu_num": 4
            }
        }' | jq -re .job_ID)
        echo "container-id=$JOB_ID" >> $GITHUB_OUTPUT

    - name: Print container public access url
      shell: bash
      env:
        CONTAINER_ID: ${{ steps.start-runner.outputs.container-id }}
      run: echo "https://api-$CONTAINER_ID.deployments.cloud.ai4eosc.eu"

    - name: Remove runner if deployment fails
      if: ${{ failure() || cancelled() }}
      shell: bash
      run: |
        STATUS=$(curl -L --request DELETE \
          --url https://api.github.com/repos/${{ github.repository }}/actions/runners/${{ steps.get-jitconfig.outputs.runner-id }} \
          --header 'Accept: application/vnd.github+json' \
          --header 'Authorization: Bearer ${{ inputs.api-token }}' \
          --header 'X-GitHub-Api-Version: 2022-11-28' \
          --write-out %{http_code} --silent --output /dev/null)
        echo "Request status: $STATUS"
        if [[ $STATUS != 204 && $STATUS != 404 ]]; then
          echo "Request failed" && exit 1
        fi
